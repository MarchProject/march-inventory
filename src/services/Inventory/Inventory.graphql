enum FavoriteStatus {
  LIKE
  DEFAULT
}

type InventoryName {
  id: String
  name: String
}

type InventoryType {
  id: String
  name: String
  description: String
  createdBy: String
  updatedBy: String
  updatedAt: Date
  createdAt: Date
}

type BrandType {
  id: String
  name: String
  description: String
  createdBy: String
  updatedBy: String
  updatedAt: Date
  createdAt: Date
}

type Inventory {
  id: String
  inventoryTypeId: String
  name: String!
  amount: Int!
  sold: Int
  sku: String
  size: String
  priceMember: Int
  price: Int!
  reorderLevel: Int
  expiryDate: Date
  brandType: BrandType
  inventoryType: InventoryType
  favorite: Boolean
  description: String
  createdBy: String
  updatedBy: String
  updatedAt: Date
  createdAt: Date
}

type ResponseInventory {
  id: String
}

type ResponseBrand {
  id: String
}

input SizeInventory {
  weight: Int
  width: Int
  length: Int
  height: Int
}

input UpsertInventoryInput {
  id: String
  name: String!
  inventoryTypeId: String!
  brandTypeId: String!
  favorite: Boolean
  amount: Int!
  sku: String
  reorderLevel: Int
  size: SizeInventory
  price: Int!
  priceMember: Int
  expiryDate: Date
  description: String
  createdBy: String
  updatedBy: String
}

input UpsertInventoryTypeInput {
  id: String
  name: String!
  description: String
  createdBy: String
  updatedBy: String
}

input UpsertBrandTypeInput {
  id: String
  name: String!
  description: String
  createdBy: String
  updatedBy: String
}

input ParamsInventory {
  search: String
  favorite: FavoriteStatus
  type: [String]
  brand: [String]
  pageNo: Int
  limit: Int
}

input ParamsInventoryType {
  search: String
  offset: Int
  limit: Int
}

input ParamsInventoryBrand {
  search: String
  offset: Int
  limit: Int
}

type ResponseInventories {
  inventories: [Inventory]
  pageLimit: Int
  pageNo: Int
  totalPage: Int
  totalRow: Int
}

type ResponseFavorite {
  id: String
}

type Mutation {
  upsertInventory(input: UpsertInventoryInput!): ResponseInventory
  deleteInventory(id: String!): ResponseInventory
  upsertInventoryType(input: UpsertInventoryTypeInput!): ResponseInventory
  deleteInventoryType(id: String!): ResponseInventory
  upsertBrandType(input: UpsertBrandTypeInput!): ResponseBrand
  deleteBrandType(id: String!): ResponseBrand
  favoriteInventory(id: String!): ResponseFavorite
}

type Query {
  getInventoryNames: [InventoryName]
  getInventory(id: String): Inventory
  getInventories(params: ParamsInventory): ResponseInventories
  getInventoryType(id: String): InventoryType
  getInventoryTypes(params: ParamsInventoryType): [InventoryType]
  getBrandType(id: String): BrandType
  getBrandTypes(params: ParamsInventoryBrand): [BrandType]
}
