enum FavoriteStatus {
  LIKE
  DEFAULT
}

enum DeletedType {
  inventory
  inventoryType
  brandType
}

enum DeletedMode {
  RECOVERY
  DELETE
}

type InventoryNameResponse {
  data: [InventoryName]
  status: Status
}

type InventoryName {
  id: String
  name: String
}

type Status {
  code: Int!
  message: String
}

type TypesInventoryResponse {
  data: [TypeInventory]
  status: Status
}

type TypeInventory {
  id: String
  name: String
  description: String
  createdBy: String
  updatedBy: String
  updatedAt: Date
  createdAt: Date
}

type BrandType {
  id: String
  name: String
  description: String
  createdBy: String
  updatedBy: String
  updatedAt: Date
  createdAt: Date
}

type BrandsInventoryDataResponse {
  data: [BrandType]
  status: Status
}

type InventoryDataResponse {
  data: Inventory
  status: Status
}

type Inventory {
  id: String
  inventoryTypeId: String
  name: String!
  amount: Int!
  sold: Int
  sku: String
  size: String
  priceMember: Int
  price: Int!
  reorderLevel: Int
  expiryDate: Date
  brandType: BrandType
  inventoryType: TypeInventory
  favorite: Boolean
  description: String
  createdBy: String
  updatedBy: String
  updatedAt: Date
  createdAt: Date
}

type ResponseId {
  id: String
}

type MutationInventoryResponse {
  data: ResponseId
  status: Status
}

type DeleteInventoryResponse {
  data: ResponseId
  status: Status
}

type ResponseInventory {
  id: String
}

type ResponseBrand {
  id: String
}

input SizeInventory {
  weight: Int
  width: Int
  length: Int
  height: Int
}

input UpsertInventoryInput {
  id: String
  name: String!
  inventoryTypeId: String!
  brandTypeId: String!
  favorite: Boolean
  amount: Int!
  sku: String
  reorderLevel: Int
  size: SizeInventory
  price: Int!
  priceMember: Int
  expiryDate: Date
  description: String
  createdBy: String
  updatedBy: String
}

input UpsertTypeInventoryInput {
  id: String
  name: String!
  description: String
  createdBy: String
  updatedBy: String
}

input UpsertBrandInventoryInput {
  id: String
  name: String!
  description: String
  createdBy: String
  updatedBy: String
}

input ParamsInventory {
  search: String
  favorite: FavoriteStatus
  type: [String]
  brand: [String]
  pageNo: Int
  limit: Int
}

input ParamsInventoryType {
  search: String
  offset: Int
  limit: Int
}

input ParamsInventoryBrand {
  search: String
  offset: Int
  limit: Int
}

type InventoriesResponse {
  data: ResponseInventories
  status: Status
}

type ResponseInventories {
  inventories: [Inventory]
  pageLimit: Int
  pageNo: Int
  totalPage: Int
  totalRow: Int
}

type ResponseFavorite {
  id: String
}

input UploadInventoryInput {
  uploadDatas: [UpsertInventoryInput]
  fileName: String
}

type UploadInventory {
  id: String
  success: Boolean
  reason: String
}

type UploadInventoryResponse {
  data: UploadInventory
  status: Status
}

type DeletedInventoryType {
  id: String
  name: String
  createdBy: String
  updatedBy: String
  updatedAt: Date
  createdAt: Date
}

type DeletedInventoryResponse {
  data: DeletedInventory
  status: Status
}

type DeletedInventory {
  inventory: [DeletedInventoryType]
  brand: [DeletedInventoryType]
  type: [DeletedInventoryType]
}

input RecoveryHardDeletedInput {
  id: String!
  type: DeletedType!
  mode: DeletedMode!
}

type RecoveryHardDeleted {
  id: String
  type: DeletedType
  mode: DeletedMode
}

type RecoveryHardDeletedResponse {
  data: RecoveryHardDeleted
  status: Status
}

type ResponseFileUploadNames {
  id: String
  name: String
}

type DataUploadFile {
  id: String
  name: String
  type: String
  brand: String
  description: String
  expiryDate: String
  amount: String
  sku: String
  reorderLevel: String
  price: String
  priceMember: String
  favorite: String
  weight: String
  width: String
  height: String
  length: String
}

type ResponseGetUploadFile {
  fileName: String
  data: [DataUploadFile]
}

type Mutation {
  uploadInventory(input: UploadInventoryInput!): UploadInventoryResponse
  upsertInventory(input: UpsertInventoryInput!): MutationInventoryResponse
  deleteInventory(id: String!): MutationInventoryResponse
  upsertTypeInventory(
    input: UpsertTypeInventoryInput!
  ): MutationInventoryResponse
  deleteTypeInventory(id: String!): MutationInventoryResponse
  upsertBrandInventory(
    input: UpsertBrandInventoryInput!
  ): MutationInventoryResponse
  deleteBrandInventory(id: String!): MutationInventoryResponse
  favoriteInventory(id: String!): MutationInventoryResponse
  recoveryHardDeleted(
    input: RecoveryHardDeletedInput!
  ): RecoveryHardDeletedResponse
  # fileUpload(id: String!): ResponseGetUploadFile
}

type Query {
  getInventoryNames: InventoryNameResponse
  getInventory(id: String): InventoryDataResponse
  getInventories(params: ParamsInventory): InventoriesResponse
  getInventoryType(id: String): TypeInventory
  getTypesInventory(params: ParamsInventoryType): TypesInventoryResponse
  getBrandType(id: String): BrandType
  getBrandsInventory(params: ParamsInventoryBrand): BrandsInventoryDataResponse
  getInventoryAllDeleted: DeletedInventoryResponse
  # getFileUploadNames: [ResponseFileUploadNames]
}
