datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

enum RoleUser {
  ADMIN
  SUPERADMIN
}

enum PaymentStatus {
  Success
  Wait
}

enum PaymentTypes {
  Utility
  CreditCard
  Telecom
  Insurance
  Loan
  Leasing
  Education
  Other
}

model Users {
  id     String        @id @default(uuid())
  role  String
  groups   Groups @relation("Users_Groups", fields: [role], references: [id])
  username String  
  password String
  email String?
  // accessToken  Boolean? @default(false)
  refreshToken String?
  deviceId String?
  createdBy String
  updatedBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  groupMembers GroupMembers[] @relation("GroupMembers_Users")
}

model GroupFunctions {
  id     String        @id @default(uuid())
  functionId String 
  functions   Functions @relation("GroupFunctions_Functions", fields: [functionId], references: [id])
  groupId String
  groups   Groups @relation("GroupFunctions_Groups", fields: [groupId], references: [id])
}

model Functions {
  id     String        @id @default(uuid())
  name String
  groupFunctions GroupFunctions[] @relation("GroupFunctions_Functions")
}

model GroupMembers {
  id     String        @id @default(uuid())
  userId String
  users   Users @relation("GroupMembers_Users", fields: [userId], references: [id])
  groupId String
  groups   Groups @relation("GroupMembers_Groups", fields: [groupId], references: [id])
}

model Groups {
  id     String        @id @default(uuid())
  name String
  groupFunctions GroupFunctions[] @relation("GroupFunctions_Groups")
  groupMembers GroupMembers[] @relation("GroupMembers_Groups")
  users Users[] @relation("Users_Groups")
}



model Payments {
  id String @id @default(uuid())
  status PaymentStatus @default(Success)
  name String
  lastDay DateTime
  types PaymentTypes 
  amount Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BrandType {
  id String @id @default(uuid())
  name String @unique
  description String
  deleted Boolean @default(false)
  createdBy String
  updatedBy String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  inventory Inventory[] @relation("Inventory_BrandType")
}

model InventoryType {
  id String @id @default(uuid())
  name String @unique
  description String
  deleted Boolean @default(false)
  createdBy String
  updatedBy String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  inventory Inventory[] @relation("Inventory_InventoryType")
}

model Inventory {
  id String @id @default(uuid())
  name String @unique
  InventoryTypeId String    @db.VarChar(40)
  inventoryType   InventoryType @relation("Inventory_InventoryType", fields: [InventoryTypeId], references: [id])
  BrandTypeId String    @db.VarChar(40)
  brandType   BrandType @relation("Inventory_BrandType", fields: [BrandTypeId], references: [id])
  amount Int @default(0)
  price Int @default(0)
  sold Int @default(0)
  expiryDate DateTime? 
  description String?
  deleted Boolean @default(false)
  createdBy String
  updatedBy String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  @@fulltext([name])
}